<?phpnamespace Corso\Http\Controllers;use Corso\Http\Requests;use Corso\models\Record;use Corso\Repositories\BusinessRepository;use Corso\Repositories\DataCompaniesRepository;use Corso\Repositories\ProductRepository;use Corso\Repositories\RecordRepository;use Illuminate\Http\Request;use Illuminate\View\View;use Corso\models\DataCompanie;use Maatwebsite\Excel\Facades\Excel;use Corso\models\Product;use Barryvdh\DomPDF\PDF;use Illuminate\Support\Facades\App;use Illuminate\Support\Facades\Redirect;class RecordsController extends Controller{    /**     * @var BusinessRepository     */    protected $businessRepository;    /**     * @var ProductRepository     */    private $productRepository;    /**     * @var RecordRepository     */    private $recordRepository;    /**     * @var DataCompaniesRepository     */    private $dataCompaniesRepository;    /**     * @param \Corso\Repositories\BusinessRepository $businessRepository     * @param \Corso\Repositories\ProductRepository $productRepository     * @param \Corso\Repositories\RecordRepository $recordRepository     * @param \Corso\Repositories\DataCompaniesRepository $dataCompaniesRepository     */    public function __construct(        BusinessRepository $businessRepository,        ProductRepository $productRepository,        RecordRepository $recordRepository,        DataCompaniesRepository $dataCompaniesRepository    )    {        $this->businessRepository = $businessRepository;        $this->productRepository = $productRepository;        $this->recordRepository = $recordRepository;        $this->dataCompaniesRepository = $dataCompaniesRepository;    }    /*    |---------------------------------------------------------------------    |@Author: Anwar Sarmiento <asarmiento@sistemasamigables.com    |@Date Create: 2015-00-00    |@Date Update: 2015-00-00    |---------------------------------------------------------------------    |@Description: Eliminamos todos los datos relacionados con el records    |----------------------------------------------------------------------    | @return mixed    |----------------------------------------------------------------------    */    public function delete($id)	{        $delete = $this->recordRepository->find($id);        if($delete):            $delete->delete();        endif;        return redirect::to('/empleados');	}    /*    |---------------------------------------------------------------------    |@Author: Anwar Sarmiento <asarmiento@sistemasamigables.com    |@Date Create: 2015-09-02    |@Date Update: 2015-00-00    |---------------------------------------------------------------------    |@Description: Con este method buscamos y enviamos los datos para ver    |   el historial de bloques de datos ya almacenados.    |@Pasos:    |   1. Enviamos a buscar la empresa a consultar por el nombre recuperamos    |     el Id para consulta en productos.    |   2. consultamos con el ID de la empresa los productos que le pretenecen    |     y recuperamos los IDs de los productos de la empresa    |   3. Recorremos los productos para hacer consulta de cada uno en el    |     historial para obtener cada uno de los registros de cada productos,    |     buscamos con el ID de los productos los instortiales para enviarlos    |     como arreglos a la vista para mostras cada historial registrado.    |    |    |    |----------------------------------------------------------------------    | @return mixed    |----------------------------------------------------------------------    */    public function productRecord($name) {        #Paso 1         $name=  $this->separatorName($name);         $business = $this->businessRepository->whereData('name',$name);        if($business->count()==0):              $error='Los datos no son correctos favor verifique';        return View('record.index', compact('error'));        endif;        #Paso 2        $products = $this->productRepository->whereData('business_id', $business[0]->id);        #Paso 3        foreach ($products AS $product):           $record[] = $this->recordRepository->whereData('product_id', $product->id);        endforeach;        $records = $record;        #Paso 4        for ($i = 0; $i < count($records); $i++):            foreach ($records[$i] AS $record):                $count[$record->id] = $this->dataCompaniesRepository->dataCount('record_id', $record->id);            endforeach;        endfor;        return View('record.index', compact('records', 'count','business'));            }    private function separatorName($name){        $Record = explode('-', strtolower($name));        switch (count($Record)):            case 1:                $Record = $Record[0];                break;            case 2:                $Record = $Record[0] . ' ' . $Record[1];                break;                    endswitch;                return ucfirst($Record);    }    /*    |---------------------------------------------------------------------    |@Author: Anwar Sarmiento <asarmiento@sistemasamigables.com    |@Date Create: 2015-09-03    |@Date Update: 2015-00-00    |---------------------------------------------------------------------    |@Description: Con este codigo buscamos el nombre del producto por la    |   relacion entre las tablas y obtenemos el nombre del producto    |   y lo concatenamos.    |----------------------------------------------------------------------    | @return mixed    |----------------------------------------------------------------------    */    public  function recordSeparator($id) {        $Record = $this->recordRepository->find($id);        $Record = explode(' ', strtolower($Record->products->name));        switch (count($Record)):            case 1:                $Record = $Record[0];                break;            case 2:                $Record = $Record[0] . '-' . $Record[1];                break;            case 3:                $Record = $Record[0] . '-' . $Record[1] . '-' . $Record[2];                break;            case 4:                $Record = $Record[0] . '-' . $Record[1] . '-' . $Record[2] . '-' . $Record[3];                break;        endswitch;        return $Record;    }   /*    |---------------------------------------------------------------------    |@Author: Anwar Sarmiento <asarmiento@sistemasamigables.com    |@Date Create: 2015-00-00    |@Date Update: 2015-09-03    |---------------------------------------------------------------------    |@Description: Con este bloque de codigo registramos los datos del    | nuevo producto ingresado de los clientes del corso para llevar un    | registro por mes de cada uno de los archivos o datos ingresados.    |@Pasos:    |   1. buscamos si ya existe el archivo que se quiere agregar    |   2. Verificamos el resultado de la consulta que si existe    |      enviamos directo el ID    |   3.    |@param    |   $dia, $year, $producto, $url    |----------------------------------------------------------------------    | @return mixed    |----------------------------------------------------------------------    */    public  function saveRecords($dia,$mes, $year, $producto, $url) {        #Paso 1        $verify = $this->recordRepository->verifyContent($dia,$mes, $year, $producto);        #Paso 2        if ($verify->isEmpty() == false):            return $verify[0]->id;        endif;        #Paso 3        $arreglo = [            'month'=>$mes,            'year'=>$year,            'url'=>$url,            'product_id'=>$producto            ];        #Paso 4        $Historial = $this->recordRepository->getModel();        if($Historial->isValid($arreglo)):            $Historial->fill($arreglo);            $Historial->save();            return $Historial->id;        endif;    }    /*    |---------------------------------------------------------------------    |@Author: Anwar Sarmiento <asarmiento@sistemasamigables.com    |@Date Create: 2015-00-00    |@Date Update: 2015-00-00    |---------------------------------------------------------------------    |@Description: aqui buscamos el ID del record que se desea descargar    |   despues buscamos todos los datos de ese historial y creamos el    |   arreglo para poder generar el excel.    |----------------------------------------------------------------------    | @return Excel    |----------------------------------------------------------------------    */    public function descargasProducto($id) {        set_time_limit(0);        ini_set('memory_limit', '20048M');        $historial = $this->recordRepository->find($id);        $dataCompanie = $this->dataCompaniesRepository->whereData('record_id',$id);        $separar = explode('/', $historial->url);        $quitarExtencion = explode('.', $separar[2]);        $data = array();        $data[] = array('Codigo',            'Tipo Cliente',            'Telefono',            'Nombre Cliente',            'Ciudad',            'estado',            'observaciones',            'Comentario',            'Fecha Entrega',            'fecha Recibido',            'monto',            'direccion',            'comentario ciudad', 'empleados');        foreach ($dataCompanie as $value):            $data[] = array($value->codigo,                $value->tipo_cliente,                $value->telefono,                $value->name_cliente,                $value->ciudades_id,                $value->observations->status->name,                $value->observations->id,                $value->comentario,                $value->fecha_entregado,                $value->fecha_recibido,                $value->monto,                $value->direccion,                $value->comentario_ciudad,                $value->empleados_id            );        endforeach;        Excel::create($quitarExtencion[0], function($excel) use ($data) {            $excel->sheet('Datos Descargados', function($sheet) use ($data) {                $sheet->fromArray($data, null, 'A1', false, false);            });        })->download('xlsx');    }    /**     * Con este metodo generamos un archivo de PDF     * para que puedan ver la informaciÃ³n trabajada los clientes.     * @param type $id     * @return type     */    public function pdfClientes($id) {        $dataCompanies = DataCompanie::where('historials_id', $id)->get();        $pdf = App::make('dompdf');        $pdf->loadView('claro.reportPdf', compact('dataCompanies'))->setPaper('letter')->setOrientation('landscape');        return $pdf->stream('Reporte.pdf');    }    /**     * Con este metodo generamos un archivo de Excel     * para que puedan ver la informaciÃ³n trabajada los clientes.     * @param type $id     */    public function descargasProductoClientes($id) {        set_time_limit(0);        ini_set('memory_limit', '20048M');        $historial = $this->recordRepository->find($id);        $dataCompanie = $this->dataCompaniesRepository->whereData('record_id', $id);        $count =$this->dataCompaniesRepository->dataCount('record_id', $id);        $separar = explode('/', $historial->url);        $quitarExtencion = explode('.', $separar[2]);        $data[] = array('NÂ°', 'Codigo',            'Nombre Cliente',            'Tipo Cliente',            'Estado',            'Observaciones',            'Comentario', 'Ciudad', 'Empleados'        );        $i = 0;        foreach ($dataCompanie as $value):            $city ="";            if(count($value->citys) >0):                $city = $value->citys->name;            endif;            $employee="";            if(count($value->staffs) >0):                $employee = $value->staffs->nameComplete();            endif;            $i++;            $data[] = array($i, $value->codigo,                $value->tipo_cliente,                $value->name_cliente,                $value->observations->status->name,                $value->observations->name,                $value->comentario,                $city,                $employee            );        endforeach;        $name ="";        $producto="";        $mes ="";        $year ="";        if(count($value->records)>0):            $name = $value->records->products->business->name;            $producto = $value->records->products->name;            $mes = $value->records->mes;            $year = $value->records->year;        endif;        $count = $count + 2;        Excel::create($name . ' ' . $mes . '-' . $year . ' ' . $producto, function($excel) use ($data, $count, $name, $producto, $mes, $year) {            // Set the title            $excel->setTitle('Reporte de Datos consultados');            // Chain the setters            $excel->setCreator('El Corso - Sistemas Amigables - Costa Rica')                    ->setCompany('El Corso');            // Call them separately            $excel->setDescription('La informaciÃ³n generada es de uso exclusivo de ' . $name);            $excel->sheet($mes . '-' . $year . ' ' . $producto, function($sheet) use ($data, $count) {                $sheet->mergeCells('A1:I1');                $sheet->setAutoSize(true);                $sheet->setFontBold(true);                $sheet->setBorder('A1:I' . $count, 'thin');                $sheet->cells('A1:I1', function($cells) {                    // Set alignment to center                    $cells->setAlignment('center');                    // Set font                    $cells->setBackground('#df0000');                    // Set with font color                    $cells->setFontColor('#ffffff');                    $cells->setFont(array(                        'family' => 'Calibri',                        'size' => '16',                        'bold' => true,                    ));                });                $sheet->cells('A2:I2', function($cells) {                    // Set font                    $cells->setBackground('#df0000');                    // Set with font color                    $cells->setFontColor('#ffffff');                    $cells->setFont(array(                        'family' => 'Calibri',                        'size' => '12',                        'bold' => true,                    ));                });                $sheet->row(1, array('Reporte de Entregas'));                $sheet->fromArray($data, null, 'A2', false, false);                //$sheet->row(1,$data);            });        })->export('xlsx');    }}